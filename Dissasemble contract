label_0000:
	// Inputs[1] { @0005  msg.value }
	0000    60  PUSH1 0x80
	0002    60  PUSH1 0x40
	0004    52  MSTORE
	0005    34  CALLVALUE
	0006    80  DUP1
	0007    15  ISZERO
	0008    61  PUSH2 0x0010
	000B    57  *JUMPI
	// Stack delta = +1
	// Outputs[2]
	// {
	//     @0004  memory[0x40:0x60] = 0x80
	//     @0005  stack[0] = msg.value
	// }
	// Block ends with conditional jump to 0x0010, if !msg.value

label_000C:
	// Incoming jump from 0x000B, if not !msg.value
	// Inputs[1] { @000F  memory[0x00:0x00] }
	000C    60  PUSH1 0x00
	000E    80  DUP1
	000F    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @000F  revert(memory[0x00:0x00]); }
	// Block terminates

label_0010:
	// Incoming jump from 0x000B, if !msg.value
	// Inputs[1] { @0014  msg.data.length }
	0010    5B  JUMPDEST
	0011    50  POP
	0012    60  PUSH1 0x04
	0014    36  CALLDATASIZE
	0015    10  LT
	0016    61  PUSH2 0x002b
	0019    57  *JUMPI
	// Stack delta = -1
	// Block ends with conditional jump to 0x002b, if msg.data.length < 0x04

label_001A:
	// Incoming jump from 0x0019, if not msg.data.length < 0x04
	// Inputs[1] { @001C  msg.data[0x00:0x20] }
	001A    60  PUSH1 0x00
	001C    35  CALLDATALOAD
	001D    60  PUSH1 0xe0
	001F    1C  SHR
	0020    80  DUP1
	0021    63  PUSH4 0x58e858b7
	0026    14  EQ
	0027    61  PUSH2 0x0030
	002A    57  *JUMPI
	// Stack delta = +1
	// Outputs[1] { @001F  stack[0] = msg.data[0x00:0x20] >> 0xe0 }
	// Block ends with conditional jump to 0x0030, if 0x58e858b7 == msg.data[0x00:0x20] >> 0xe0

label_002B:
	// Incoming jump from 0x002A, if not 0x58e858b7 == msg.data[0x00:0x20] >> 0xe0
	// Incoming jump from 0x0019, if msg.data.length < 0x04
	// Inputs[1] { @002F  memory[0x00:0x00] }
	002B    5B  JUMPDEST
	002C    60  PUSH1 0x00
	002E    80  DUP1
	002F    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @002F  revert(memory[0x00:0x00]); }
	// Block terminates

label_0030:
	// Incoming jump from 0x002A, if 0x58e858b7 == msg.data[0x00:0x20] >> 0xe0
	// Inputs[1] { @0037  msg.data.length }
	0030    5B  JUMPDEST
	0031    61  PUSH2 0x004a
	0034    60  PUSH1 0x04
	0036    80  DUP1
	0037    36  CALLDATASIZE
	0038    03  SUB
	0039    81  DUP2
	003A    01  ADD
	003B    90  SWAP1
	003C    61  PUSH2 0x0045
	003F    91  SWAP2
	0040    90  SWAP1
	0041    61  PUSH2 0x022f
	0044    56  *JUMP
	// Stack delta = +4
	// Outputs[4]
	// {
	//     @0031  stack[0] = 0x004a
	//     @003F  stack[1] = 0x0045
	//     @0040  stack[2] = 0x04 + (msg.data.length - 0x04)
	//     @0040  stack[3] = 0x04
	// }
	// Block ends with call to 0x022f, returns to 0x0045

label_0045:
	// Incoming return from call to 0x022F at 0x0044
	0045    5B  JUMPDEST
	0046    61  PUSH2 0x004c
	0049    56  *JUMP
	// Stack delta = +0
	// Block ends with unconditional jump to 0x004c

label_004A:
	// Incoming return from call to 0x0045 at 0x0044
	004A    5B  JUMPDEST
	004B    00  *STOP
	// Stack delta = +0
	// Outputs[1] { @004B  stop(); }
	// Block terminates

label_004C:
	// Incoming jump from 0x0049
	// Inputs[2]
	// {
	//     @004D  msg.sender
	//     @0067  storage[0x00]
	// }
	004C    5B  JUMPDEST
	004D    33  CALLER
	004E    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	0063    16  AND
	0064    60  PUSH1 0x00
	0066    80  DUP1
	0067    54  SLOAD
	0068    90  SWAP1
	0069    61  PUSH2 0x0100
	006C    0A  EXP
	006D    90  SWAP1
	006E    04  DIV
	006F    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	0084    16  AND
	0085    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	009A    16  AND
	009B    14  EQ
	009C    61  PUSH2 0x00d1
	009F    57  *JUMPI
	// Stack delta = +0
	// Block ends with conditional jump to 0x00d1, if 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & storage[0x00] / 0x0100 ** 0x00 == 0xffffffffffffffffffffffffffffffffffffffff & msg.sender

label_00A0:
	// Incoming jump from 0x009F, if not 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & storage[0x00] / 0x0100 ** 0x00 == 0xffffffffffffffffffffffffffffffffffffffff & msg.sender
	// Inputs[3]
	// {
	//     @00A2  memory[0x40:0x60]
	//     @00CB  memory[0x40:0x60]
	//     @00D0  memory[memory[0x40:0x60]:memory[0x40:0x60] + (0x04 + memory[0x40:0x60]) - memory[0x40:0x60]]
	// }
	00A0    60  PUSH1 0x40
	00A2    51  MLOAD
	00A3    7F  PUSH32 0xd369966900000000000000000000000000000000000000000000000000000000
	00C4    81  DUP2
	00C5    52  MSTORE
	00C6    60  PUSH1 0x04
	00C8    01  ADD
	00C9    60  PUSH1 0x40
	00CB    51  MLOAD
	00CC    80  DUP1
	00CD    91  SWAP2
	00CE    03  SUB
	00CF    90  SWAP1
	00D0    FD  *REVERT
	// Stack delta = +0
	// Outputs[2]
	// {
	//     @00C5  memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] = 0xd369966900000000000000000000000000000000000000000000000000000000
	//     @00D0  revert(memory[memory[0x40:0x60]:memory[0x40:0x60] + (0x04 + memory[0x40:0x60]) - memory[0x40:0x60]]);
	// }
	// Block terminates

label_00D1:
	// Incoming jump from 0x009F, if 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & storage[0x00] / 0x0100 ** 0x00 == 0xffffffffffffffffffffffffffffffffffffffff & msg.sender
	// Inputs[6]
	// {
	//     @0105  storage[0x00]
	//     @0128  stack[-4]
	//     @0129  stack[-3]
	//     @012A  stack[-2]
	//     @012B  stack[-1]
	//     @012E  memory[0x40:0x60]
	// }
	00D1    5B  JUMPDEST
	00D2    73  PUSH20 0xe7057b10e2b59f46d151588d9c8694b4b8328f44
	00E7    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	00FC    16  AND
	00FD    63  PUSH4 0xd6e03cd4
	0102    60  PUSH1 0x00
	0104    80  DUP1
	0105    54  SLOAD
	0106    90  SWAP1
	0107    61  PUSH2 0x0100
	010A    0A  EXP
	010B    90  SWAP1
	010C    04  DIV
	010D    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	0122    16  AND
	0123    61  PUSH2 0xdead
	0126    60  PUSH1 0x01
	0128    88  DUP9
	0129    88  DUP9
	012A    88  DUP9
	012B    88  DUP9
	012C    60  PUSH1 0x40
	012E    51  MLOAD
	012F    88  DUP9
	0130    63  PUSH4 0xffffffff
	0135    16  AND
	0136    60  PUSH1 0xe0
	0138    1B  SHL
	0139    81  DUP2
	013A    52  MSTORE
	013B    60  PUSH1 0x04
	013D    01  ADD
	013E    61  PUSH2 0x014d
	0141    97  SWAP8
	0142    96  SWAP7
	0143    95  SWAP6
	0144    94  SWAP5
	0145    93  SWAP4
	0146    92  SWAP3
	0147    91  SWAP2
	0148    90  SWAP1
	0149    61  PUSH2 0x0349
	014C    56  *JUMP
	// Stack delta = +11
	// Outputs[12]
	// {
	//     @00FC  stack[0] = 0xffffffffffffffffffffffffffffffffffffffff & 0xe7057b10e2b59f46d151588d9c8694b4b8328f44
	//     @00FD  stack[1] = 0xd6e03cd4
	//     @013A  memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] = (0xffffffff & 0xd6e03cd4) << 0xe0
	//     @0141  stack[2] = 0x014d
	//     @0142  stack[3] = 0xffffffffffffffffffffffffffffffffffffffff & storage[0x00] / 0x0100 ** 0x00
	//     @0143  stack[4] = 0xdead
	//     @0144  stack[5] = 0x01
	//     @0145  stack[6] = stack[-4]
	//     @0146  stack[7] = stack[-3]
	//     @0147  stack[8] = stack[-2]
	//     @0148  stack[9] = stack[-1]
	//     @0148  stack[10] = 0x04 + memory[0x40:0x60]
	// }
	// Block ends with call to 0x0349, returns to 0x014D

label_014D:
	// Incoming return from call to 0x0349 at 0x014C
	// Inputs[4]
	// {
	//     @0152  memory[0x40:0x60]
	//     @0154  stack[-1]
	//     @0159  stack[-3]
	//     @015B  address(stack[-3]).code.length
	// }
	014D    5B  JUMPDEST
	014E    60  PUSH1 0x00
	0150    60  PUSH1 0x40
	0152    51  MLOAD
	0153    80  DUP1
	0154    83  DUP4
	0155    03  SUB
	0156    81  DUP2
	0157    60  PUSH1 0x00
	0159    87  DUP8
	015A    80  DUP1
	015B    3B  EXTCODESIZE
	015C    15  ISZERO
	015D    80  DUP1
	015E    15  ISZERO
	015F    61  PUSH2 0x0167
	0162    57  *JUMPI
	// Stack delta = +7
	// Outputs[7]
	// {
	//     @014E  stack[0] = 0x00
	//     @0152  stack[1] = memory[0x40:0x60]
	//     @0155  stack[2] = stack[-1] - memory[0x40:0x60]
	//     @0156  stack[3] = memory[0x40:0x60]
	//     @0157  stack[4] = 0x00
	//     @0159  stack[5] = stack[-3]
	//     @015C  stack[6] = !address(stack[-3]).code.length
	// }
	// Block ends with conditional jump to 0x0167, if !!address(stack[-3]).code.length

label_0163:
	// Incoming jump from 0x0162, if not !!address(stack[-3]).code.length
	// Inputs[1] { @0166  memory[0x00:0x00] }
	0163    60  PUSH1 0x00
	0165    80  DUP1
	0166    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @0166  revert(memory[0x00:0x00]); }
	// Block terminates

label_0167:
	// Incoming jump from 0x0162, if !!address(stack[-3]).code.length
	// Inputs[9]
	// {
	//     @0169  msg.gas
	//     @016A  address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])
	//     @016A  stack[-5]
	//     @016A  stack[-4]
	//     @016A  stack[-3]
	//     @016A  stack[-7]
	//     @016A  memory[stack[-4]:stack[-4] + stack[-5]]
	//     @016A  stack[-6]
	//     @016A  stack[-2]
	// }
	0167    5B  JUMPDEST
	0168    50  POP
	0169    5A  GAS
	016A    F1  CALL
	016B    15  ISZERO
	016C    80  DUP1
	016D    15  ISZERO
	016E    61  PUSH2 0x017b
	0171    57  *JUMPI
	// Stack delta = -6
	// Outputs[2]
	// {
	//     @016A  memory[stack[-6]:stack[-6] + stack[-7]] = address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])
	//     @016B  stack[-7] = !address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])
	// }
	// Block ends with conditional jump to 0x017b, if !!address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])

label_0172:
	// Incoming jump from 0x0171, if not !!address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])
	// Inputs[4]
	// {
	//     @0172  returndata.length
	//     @0176  returndata[0x00:0x00 + returndata.length]
	//     @0177  returndata.length
	//     @017A  memory[0x00:0x00 + returndata.length]
	// }
	0172    3D  RETURNDATASIZE
	0173    60  PUSH1 0x00
	0175    80  DUP1
	0176    3E  RETURNDATACOPY
	0177    3D  RETURNDATASIZE
	0178    60  PUSH1 0x00
	017A    FD  *REVERT
	// Stack delta = +0
	// Outputs[2]
	// {
	//     @0176  memory[0x00:0x00 + returndata.length] = returndata[0x00:0x00 + returndata.length]
	//     @017A  revert(memory[0x00:0x00 + returndata.length]);
	// }
	// Block terminates

label_017B:
	// Incoming jump from 0x0171, if !!address(stack[-2]).call.gas(msg.gas).value(stack[-3])(memory[stack[-4]:stack[-4] + stack[-5]])
	// Inputs[1] { @0184  stack[-9] }
	017B    5B  JUMPDEST
	017C    50  POP
	017D    50  POP
	017E    50  POP
	017F    50  POP
	0180    50  POP
	0181    50  POP
	0182    50  POP
	0183    50  POP
	0184    56  *JUMP
	// Stack delta = -9
	// Block ends with unconditional jump to stack[-9]

label_0185:
	// Incoming jump from 0x0247
	// Inputs[1] { @0189  memory[0x00:0x00] }
	0185    5B  JUMPDEST
	0186    60  PUSH1 0x00
	0188    80  DUP1
	0189    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @0189  revert(memory[0x00:0x00]); }
	// Block terminates

label_018A:
	// Incoming call from 0x0324, returns to 0x0325
	// Incoming jump from 0x0305
	// Incoming call from 0x019C, returns to 0x019D
	// Inputs[2]
	// {
	//     @018D  stack[-1]
	//     @0190  stack[-2]
	// }
	018A    5B  JUMPDEST
	018B    60  PUSH1 0x00
	018D    81  DUP2
	018E    90  SWAP1
	018F    50  POP
	0190    91  SWAP2
	0191    90  SWAP1
	0192    50  POP
	0193    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @0190  stack[-2] = stack[-1] }
	// Block ends with unconditional jump to stack[-2]

label_0194:
	// Incoming call from 0x01B9, returns to 0x01BA
	// Inputs[1] { @0198  stack[-1] }
	0194    5B  JUMPDEST
	0195    61  PUSH2 0x019d
	0198    81  DUP2
	0199    61  PUSH2 0x018a
	019C    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @0195  stack[0] = 0x019d
	//     @0198  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x018a, returns to 0x019D

label_019D:
	// Incoming return from call to 0x018A at 0x019C
	// Inputs[2]
	// {
	//     @019E  stack[-2]
	//     @019F  stack[-1]
	// }
	019D    5B  JUMPDEST
	019E    81  DUP2
	019F    14  EQ
	01A0    61  PUSH2 0x01a8
	01A3    57  *JUMPI
	// Stack delta = -1
	// Block ends with conditional jump to 0x01a8, if stack[-2] == stack[-1]

label_01A4:
	// Incoming jump from 0x01A3, if not stack[-2] == stack[-1]
	// Inputs[1] { @01A7  memory[0x00:0x00] }
	01A4    60  PUSH1 0x00
	01A6    80  DUP1
	01A7    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @01A7  revert(memory[0x00:0x00]); }
	// Block terminates

label_01A8:
	// Incoming jump from 0x01A3, if stack[-2] == stack[-1]
	// Inputs[1] { @01AA  stack[-2] }
	01A8    5B  JUMPDEST
	01A9    50  POP
	01AA    56  *JUMP
	// Stack delta = -2
	// Block ends with unconditional jump to stack[-2]

label_01AB:
	// Incoming call from 0x0256, returns to 0x0257
	// Inputs[2]
	// {
	//     @01AE  stack[-1]
	//     @01AF  msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	01AB    5B  JUMPDEST
	01AC    60  PUSH1 0x00
	01AE    81  DUP2
	01AF    35  CALLDATALOAD
	01B0    90  SWAP1
	01B1    50  POP
	01B2    61  PUSH2 0x01ba
	01B5    81  DUP2
	01B6    61  PUSH2 0x0194
	01B9    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @01B0  stack[0] = msg.data[stack[-1]:stack[-1] + 0x20]
	//     @01B2  stack[1] = 0x01ba
	//     @01B5  stack[2] = msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	// Block ends with call to 0x0194, returns to 0x01BA

label_01BA:
	// Incoming return from call to 0x0194 at 0x01B9
	// Inputs[3]
	// {
	//     @01BB  stack[-4]
	//     @01BB  stack[-1]
	//     @01BC  stack[-3]
	// }
	01BA    5B  JUMPDEST
	01BB    92  SWAP3
	01BC    91  SWAP2
	01BD    50  POP
	01BE    50  POP
	01BF    56  *JUMP
	// Stack delta = -3
	// Outputs[1] { @01BB  stack[-4] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_01C0:
	// Incoming call from 0x01D5, returns to 0x01D6
	// Incoming call from 0x0333, returns to 0x0334
	// Inputs[2]
	// {
	//     @01C5  stack[-1]
	//     @01C9  stack[-2]
	// }
	01C0    5B  JUMPDEST
	01C1    60  PUSH1 0x00
	01C3    60  PUSH1 0xff
	01C5    82  DUP3
	01C6    16  AND
	01C7    90  SWAP1
	01C8    50  POP
	01C9    91  SWAP2
	01CA    90  SWAP1
	01CB    50  POP
	01CC    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @01C9  stack[-2] = stack[-1] & 0xff }
	// Block ends with unconditional jump to stack[-2]

label_01CD:
	// Incoming call from 0x01F2, returns to 0x01F3
	// Inputs[1] { @01D1  stack[-1] }
	01CD    5B  JUMPDEST
	01CE    61  PUSH2 0x01d6
	01D1    81  DUP2
	01D2    61  PUSH2 0x01c0
	01D5    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @01CE  stack[0] = 0x01d6
	//     @01D1  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x01c0, returns to 0x01D6

label_01D6:
	// Incoming return from call to 0x01C0 at 0x01D5
	// Inputs[2]
	// {
	//     @01D7  stack[-2]
	//     @01D8  stack[-1]
	// }
	01D6    5B  JUMPDEST
	01D7    81  DUP2
	01D8    14  EQ
	01D9    61  PUSH2 0x01e1
	01DC    57  *JUMPI
	// Stack delta = -1
	// Block ends with conditional jump to 0x01e1, if stack[-2] == stack[-1]

label_01DD:
	// Incoming jump from 0x01DC, if not stack[-2] == stack[-1]
	// Inputs[1] { @01E0  memory[0x00:0x00] }
	01DD    60  PUSH1 0x00
	01DF    80  DUP1
	01E0    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @01E0  revert(memory[0x00:0x00]); }
	// Block terminates

label_01E1:
	// Incoming jump from 0x01DC, if stack[-2] == stack[-1]
	// Inputs[1] { @01E3  stack[-2] }
	01E1    5B  JUMPDEST
	01E2    50  POP
	01E3    56  *JUMP
	// Stack delta = -2
	// Block ends with unconditional jump to stack[-2]

label_01E4:
	// Incoming call from 0x0267, returns to 0x0268
	// Inputs[2]
	// {
	//     @01E7  stack[-1]
	//     @01E8  msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	01E4    5B  JUMPDEST
	01E5    60  PUSH1 0x00
	01E7    81  DUP2
	01E8    35  CALLDATALOAD
	01E9    90  SWAP1
	01EA    50  POP
	01EB    61  PUSH2 0x01f3
	01EE    81  DUP2
	01EF    61  PUSH2 0x01cd
	01F2    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @01E9  stack[0] = msg.data[stack[-1]:stack[-1] + 0x20]
	//     @01EB  stack[1] = 0x01f3
	//     @01EE  stack[2] = msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	// Block ends with call to 0x01cd, returns to 0x01F3

label_01F3:
	// Incoming return from call to 0x01CD at 0x01F2
	// Inputs[3]
	// {
	//     @01F4  stack[-1]
	//     @01F4  stack[-4]
	//     @01F5  stack[-3]
	// }
	01F3    5B  JUMPDEST
	01F4    92  SWAP3
	01F5    91  SWAP2
	01F6    50  POP
	01F7    50  POP
	01F8    56  *JUMP
	// Stack delta = -3
	// Outputs[1] { @01F4  stack[-4] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_01F9:
	// Incoming call from 0x020B, returns to 0x020C
	// Incoming call from 0x0342, returns to 0x0343
	// Inputs[2]
	// {
	//     @01FC  stack[-1]
	//     @01FF  stack[-2]
	// }
	01F9    5B  JUMPDEST
	01FA    60  PUSH1 0x00
	01FC    81  DUP2
	01FD    90  SWAP1
	01FE    50  POP
	01FF    91  SWAP2
	0200    90  SWAP1
	0201    50  POP
	0202    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @01FF  stack[-2] = stack[-1] }
	// Block ends with unconditional jump to stack[-2]

label_0203:
	// Incoming call from 0x0228, returns to 0x0229
	// Inputs[1] { @0207  stack[-1] }
	0203    5B  JUMPDEST
	0204    61  PUSH2 0x020c
	0207    81  DUP2
	0208    61  PUSH2 0x01f9
	020B    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @0204  stack[0] = 0x020c
	//     @0207  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x01f9, returns to 0x020C

label_020C:
	// Incoming return from call to 0x01F9 at 0x020B
	// Inputs[2]
	// {
	//     @020D  stack[-2]
	//     @020E  stack[-1]
	// }
	020C    5B  JUMPDEST
	020D    81  DUP2
	020E    14  EQ
	020F    61  PUSH2 0x0217
	0212    57  *JUMPI
	// Stack delta = -1
	// Block ends with conditional jump to 0x0217, if stack[-2] == stack[-1]

label_0213:
	// Incoming jump from 0x0212, if not stack[-2] == stack[-1]
	// Inputs[1] { @0216  memory[0x00:0x00] }
	0213    60  PUSH1 0x00
	0215    80  DUP1
	0216    FD  *REVERT
	// Stack delta = +0
	// Outputs[1] { @0216  revert(memory[0x00:0x00]); }
	// Block terminates

label_0217:
	// Incoming jump from 0x0212, if stack[-2] == stack[-1]
	// Inputs[1] { @0219  stack[-2] }
	0217    5B  JUMPDEST
	0218    50  POP
	0219    56  *JUMP
	// Stack delta = -2
	// Block ends with unconditional jump to stack[-2]

label_021A:
	// Incoming call from 0x0289, returns to 0x028A
	// Incoming call from 0x0278, returns to 0x0279
	// Inputs[2]
	// {
	//     @021D  stack[-1]
	//     @021E  msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	021A    5B  JUMPDEST
	021B    60  PUSH1 0x00
	021D    81  DUP2
	021E    35  CALLDATALOAD
	021F    90  SWAP1
	0220    50  POP
	0221    61  PUSH2 0x0229
	0224    81  DUP2
	0225    61  PUSH2 0x0203
	0228    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @021F  stack[0] = msg.data[stack[-1]:stack[-1] + 0x20]
	//     @0221  stack[1] = 0x0229
	//     @0224  stack[2] = msg.data[stack[-1]:stack[-1] + 0x20]
	// }
	// Block ends with call to 0x0203, returns to 0x0229

label_0229:
	// Incoming return from call to 0x0203 at 0x0228
	// Inputs[3]
	// {
	//     @022A  stack[-4]
	//     @022A  stack[-1]
	//     @022B  stack[-3]
	// }
	0229    5B  JUMPDEST
	022A    92  SWAP3
	022B    91  SWAP2
	022C    50  POP
	022D    50  POP
	022E    56  *JUMP
	// Stack delta = -3
	// Outputs[1] { @022A  stack[-4] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_022F:
	// Incoming call from 0x0044, returns to 0x0045
	// Inputs[2]
	// {
	//     @0238  stack[-1]
	//     @0239  stack[-2]
	// }
	022F    5B  JUMPDEST
	0230    60  PUSH1 0x00
	0232    80  DUP1
	0233    60  PUSH1 0x00
	0235    80  DUP1
	0236    60  PUSH1 0x80
	0238    85  DUP6
	0239    87  DUP8
	023A    03  SUB
	023B    12  SLT
	023C    15  ISZERO
	023D    61  PUSH2 0x0249
	0240    57  *JUMPI
	// Stack delta = +4
	// Outputs[4]
	// {
	//     @0230  stack[0] = 0x00
	//     @0232  stack[1] = 0x00
	//     @0233  stack[2] = 0x00
	//     @0235  stack[3] = 0x00
	// }
	// Block ends with conditional jump to 0x0249, if !(stack[-2] - stack[-1] i< 0x80)

label_0241:
	// Incoming jump from 0x0240, if not !(stack[-2] - stack[-1] i< 0x80)
	0241    61  PUSH2 0x0248
	0244    61  PUSH2 0x0185
	0247    56  *JUMP
	// Stack delta = +1
	// Outputs[1] { @0241  stack[0] = 0x0248 }
	// Block ends with unconditional jump to 0x0185

	0248    5B    JUMPDEST
label_0249:
	// Incoming jump from 0x0240, if !(stack[-2] - stack[-1] i< 0x80)
	// Inputs[2]
	// {
	//     @024F  stack[-6]
	//     @0251  stack[-5]
	// }
	0249    5B  JUMPDEST
	024A    60  PUSH1 0x00
	024C    61  PUSH2 0x0257
	024F    87  DUP8
	0250    82  DUP3
	0251    88  DUP9
	0252    01  ADD
	0253    61  PUSH2 0x01ab
	0256    56  *JUMP
	// Stack delta = +4
	// Outputs[4]
	// {
	//     @024A  stack[0] = 0x00
	//     @024C  stack[1] = 0x0257
	//     @024F  stack[2] = stack[-6]
	//     @0252  stack[3] = stack[-5] + 0x00
	// }
	// Block ends with call to 0x01ab, returns to 0x0257

label_0257:
	// Incoming return from call to 0x01AB at 0x0256
	// Inputs[4]
	// {
	//     @0258  stack[-6]
	//     @0258  stack[-1]
	//     @0260  stack[-8]
	//     @0262  stack[-7]
	// }
	0257    5B  JUMPDEST
	0258    94  SWAP5
	0259    50  POP
	025A    50  POP
	025B    60  PUSH1 0x20
	025D    61  PUSH2 0x0268
	0260    87  DUP8
	0261    82  DUP3
	0262    88  DUP9
	0263    01  ADD
	0264    61  PUSH2 0x01e4
	0267    56  *JUMP
	// Stack delta = +2
	// Outputs[5]
	// {
	//     @0258  stack[-6] = stack[-1]
	//     @025B  stack[-2] = 0x20
	//     @025D  stack[-1] = 0x0268
	//     @0260  stack[0] = stack[-8]
	//     @0263  stack[1] = stack[-7] + 0x20
	// }
	// Block ends with call to 0x01e4, returns to 0x0268

label_0268:
	// Incoming return from call to 0x01E4 at 0x0267
	// Inputs[4]
	// {
	//     @0269  stack[-5]
	//     @0269  stack[-1]
	//     @0271  stack[-8]
	//     @0273  stack[-7]
	// }
	0268    5B  JUMPDEST
	0269    93  SWAP4
	026A    50  POP
	026B    50  POP
	026C    60  PUSH1 0x40
	026E    61  PUSH2 0x0279
	0271    87  DUP8
	0272    82  DUP3
	0273    88  DUP9
	0274    01  ADD
	0275    61  PUSH2 0x021a
	0278    56  *JUMP
	// Stack delta = +2
	// Outputs[5]
	// {
	//     @0269  stack[-5] = stack[-1]
	//     @026C  stack[-2] = 0x40
	//     @026E  stack[-1] = 0x0279
	//     @0271  stack[0] = stack[-8]
	//     @0274  stack[1] = stack[-7] + 0x40
	// }
	// Block ends with call to 0x021a, returns to 0x0279

label_0279:
	// Incoming return from call to 0x021A at 0x0278
	// Inputs[4]
	// {
	//     @027A  stack[-4]
	//     @027A  stack[-1]
	//     @0282  stack[-8]
	//     @0284  stack[-7]
	// }
	0279    5B  JUMPDEST
	027A    92  SWAP3
	027B    50  POP
	027C    50  POP
	027D    60  PUSH1 0x60
	027F    61  PUSH2 0x028a
	0282    87  DUP8
	0283    82  DUP3
	0284    88  DUP9
	0285    01  ADD
	0286    61  PUSH2 0x021a
	0289    56  *JUMP
	// Stack delta = +2
	// Outputs[5]
	// {
	//     @027A  stack[-4] = stack[-1]
	//     @027D  stack[-2] = 0x60
	//     @027F  stack[-1] = 0x028a
	//     @0282  stack[0] = stack[-8]
	//     @0285  stack[1] = stack[-7] + 0x60
	// }
	// Block ends with call to 0x021a, returns to 0x028A

label_028A:
	// Incoming return from call to 0x021A at 0x0289
	// Inputs[8]
	// {
	//     @028B  stack[-3]
	//     @028B  stack[-1]
	//     @028E  stack[-6]
	//     @028F  stack[-9]
	//     @0290  stack[-5]
	//     @0291  stack[-8]
	//     @0293  stack[-4]
	//     @0293  stack[-7]
	// }
	028A    5B  JUMPDEST
	028B    91  SWAP2
	028C    50  POP
	028D    50  POP
	028E    92  SWAP3
	028F    95  SWAP6
	0290    91  SWAP2
	0291    94  SWAP5
	0292    50  POP
	0293    92  SWAP3
	0294    50  POP
	0295    56  *JUMP
	// Stack delta = -5
	// Outputs[4]
	// {
	//     @028E  stack[-6] = stack[-1]
	//     @028F  stack[-9] = stack[-6]
	//     @0291  stack[-8] = stack[-5]
	//     @0293  stack[-7] = stack[-4]
	// }
	// Block ends with unconditional jump to stack[-9]

label_0296:
	// Incoming call from 0x02C0, returns to 0x02C1
	// Inputs[2]
	// {
	//     @02AE  stack[-1]
	//     @02B2  stack[-2]
	// }
	0296    5B  JUMPDEST
	0297    60  PUSH1 0x00
	0299    73  PUSH20 0xffffffffffffffffffffffffffffffffffffffff
	02AE    82  DUP3
	02AF    16  AND
	02B0    90  SWAP1
	02B1    50  POP
	02B2    91  SWAP2
	02B3    90  SWAP1
	02B4    50  POP
	02B5    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @02B2  stack[-2] = stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff }
	// Block ends with unconditional jump to stack[-2]

label_02B6:
	// Incoming call from 0x02D0, returns to 0x02D1
	// Inputs[1] { @02BC  stack[-1] }
	02B6    5B  JUMPDEST
	02B7    60  PUSH1 0x00
	02B9    61  PUSH2 0x02c1
	02BC    82  DUP3
	02BD    61  PUSH2 0x0296
	02C0    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @02B7  stack[0] = 0x00
	//     @02B9  stack[1] = 0x02c1
	//     @02BC  stack[2] = stack[-1]
	// }
	// Block ends with call to 0x0296, returns to 0x02C1

label_02C1:
	// Incoming return from call to 0x0296 at 0x02C0
	// Inputs[4]
	// {
	//     @02C2  stack[-2]
	//     @02C2  stack[-1]
	//     @02C4  stack[-4]
	//     @02C5  stack[-3]
	// }
	02C1    5B  JUMPDEST
	02C2    90  SWAP1
	02C3    50  POP
	02C4    91  SWAP2
	02C5    90  SWAP1
	02C6    50  POP
	02C7    56  *JUMP
	// Stack delta = -3
	// Outputs[1] { @02C4  stack[-4] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_02C8:
	// Incoming call from 0x035D, returns to 0x035E
	// Incoming call from 0x036A, returns to 0x036B
	// Inputs[1] { @02CC  stack[-1] }
	02C8    5B  JUMPDEST
	02C9    61  PUSH2 0x02d1
	02CC    81  DUP2
	02CD    61  PUSH2 0x02b6
	02D0    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @02C9  stack[0] = 0x02d1
	//     @02CC  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x02b6, returns to 0x02D1

label_02D1:
	// Incoming return from call to 0x02B6 at 0x02D0
	// Inputs[3]
	// {
	//     @02D2  stack[-3]
	//     @02D3  stack[-1]
	//     @02D6  stack[-4]
	// }
	02D1    5B  JUMPDEST
	02D2    82  DUP3
	02D3    52  MSTORE
	02D4    50  POP
	02D5    50  POP
	02D6    56  *JUMP
	// Stack delta = -4
	// Outputs[1] { @02D3  memory[stack[-3]:stack[-3] + 0x20] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_02D7:
	// Incoming call from 0x02FB, returns to 0x02FC
	// Inputs[2]
	// {
	//     @02DA  stack[-1]
	//     @02DD  stack[-2]
	// }
	02D7    5B  JUMPDEST
	02D8    60  PUSH1 0x00
	02DA    81  DUP2
	02DB    90  SWAP1
	02DC    50  POP
	02DD    91  SWAP2
	02DE    90  SWAP1
	02DF    50  POP
	02E0    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @02DD  stack[-2] = stack[-1] }
	// Block ends with unconditional jump to stack[-2]

label_02E1:
	// Incoming jump from 0x0300
	// Inputs[2]
	// {
	//     @02E4  stack[-1]
	//     @02E7  stack[-2]
	// }
	02E1    5B  JUMPDEST
	02E2    60  PUSH1 0x00
	02E4    81  DUP2
	02E5    90  SWAP1
	02E6    50  POP
	02E7    91  SWAP2
	02E8    90  SWAP1
	02E9    50  POP
	02EA    56  *JUMP
	// Stack delta = -1
	// Outputs[1] { @02E7  stack[-2] = stack[-1] }
	// Block ends with unconditional jump to stack[-2]

label_02EB:
	// Incoming call from 0x0315, returns to 0x0316
	// Inputs[1] { @02F7  stack[-1] }
	02EB    5B  JUMPDEST
	02EC    60  PUSH1 0x00
	02EE    61  PUSH2 0x0306
	02F1    61  PUSH2 0x0301
	02F4    61  PUSH2 0x02fc
	02F7    84  DUP5
	02F8    61  PUSH2 0x02d7
	02FB    56  *JUMP
	// Stack delta = +5
	// Outputs[5]
	// {
	//     @02EC  stack[0] = 0x00
	//     @02EE  stack[1] = 0x0306
	//     @02F1  stack[2] = 0x0301
	//     @02F4  stack[3] = 0x02fc
	//     @02F7  stack[4] = stack[-1]
	// }
	// Block ends with call to 0x02d7, returns to 0x02FC

label_02FC:
	// Incoming return from call to 0x02D7 at 0x02FB
	02FC    5B  JUMPDEST
	02FD    61  PUSH2 0x02e1
	0300    56  *JUMP
	// Stack delta = +0
	// Block ends with unconditional jump to 0x02e1

label_0301:
	// Incoming return from call to 0x02FC at 0x02FB
	0301    5B  JUMPDEST
	0302    61  PUSH2 0x018a
	0305    56  *JUMP
	// Stack delta = +0
	// Block ends with unconditional jump to 0x018a

label_0306:
	// Incoming return from call to 0x0301 at 0x02FB
	// Inputs[4]
	// {
	//     @0307  stack[-1]
	//     @0307  stack[-2]
	//     @0309  stack[-4]
	//     @030A  stack[-3]
	// }
	0306    5B  JUMPDEST
	0307    90  SWAP1
	0308    50  POP
	0309    91  SWAP2
	030A    90  SWAP1
	030B    50  POP
	030C    56  *JUMP
	// Stack delta = -3
	// Outputs[1] { @0309  stack[-4] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_030D:
	// Incoming call from 0x0377, returns to 0x0378
	// Inputs[1] { @0311  stack[-1] }
	030D    5B  JUMPDEST
	030E    61  PUSH2 0x0316
	0311    81  DUP2
	0312    61  PUSH2 0x02eb
	0315    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @030E  stack[0] = 0x0316
	//     @0311  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x02eb, returns to 0x0316

label_0316:
	// Incoming return from call to 0x02EB at 0x0315
	// Inputs[3]
	// {
	//     @0317  stack[-3]
	//     @0318  stack[-1]
	//     @031B  stack[-4]
	// }
	0316    5B  JUMPDEST
	0317    82  DUP3
	0318    52  MSTORE
	0319    50  POP
	031A    50  POP
	031B    56  *JUMP
	// Stack delta = -4
	// Outputs[1] { @0318  memory[stack[-3]:stack[-3] + 0x20] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_031C:
	// Incoming call from 0x0384, returns to 0x0385
	// Inputs[1] { @0320  stack[-1] }
	031C    5B  JUMPDEST
	031D    61  PUSH2 0x0325
	0320    81  DUP2
	0321    61  PUSH2 0x018a
	0324    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @031D  stack[0] = 0x0325
	//     @0320  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x018a, returns to 0x0325

label_0325:
	// Incoming return from call to 0x018A at 0x0324
	// Inputs[3]
	// {
	//     @0326  stack[-3]
	//     @0327  stack[-1]
	//     @032A  stack[-4]
	// }
	0325    5B  JUMPDEST
	0326    82  DUP3
	0327    52  MSTORE
	0328    50  POP
	0329    50  POP
	032A    56  *JUMP
	// Stack delta = -4
	// Outputs[1] { @0327  memory[stack[-3]:stack[-3] + 0x20] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_032B:
	// Incoming call from 0x0391, returns to 0x0392
	// Inputs[1] { @032F  stack[-1] }
	032B    5B  JUMPDEST
	032C    61  PUSH2 0x0334
	032F    81  DUP2
	0330    61  PUSH2 0x01c0
	0333    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @032C  stack[0] = 0x0334
	//     @032F  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x01c0, returns to 0x0334

label_0334:
	// Incoming return from call to 0x01C0 at 0x0333
	// Inputs[3]
	// {
	//     @0335  stack[-3]
	//     @0336  stack[-1]
	//     @0339  stack[-4]
	// }
	0334    5B  JUMPDEST
	0335    82  DUP3
	0336    52  MSTORE
	0337    50  POP
	0338    50  POP
	0339    56  *JUMP
	// Stack delta = -4
	// Outputs[1] { @0336  memory[stack[-3]:stack[-3] + 0x20] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_033A:
	// Incoming call from 0x039E, returns to 0x039F
	// Incoming call from 0x03AB, returns to 0x03AC
	// Inputs[1] { @033E  stack[-1] }
	033A    5B  JUMPDEST
	033B    61  PUSH2 0x0343
	033E    81  DUP2
	033F    61  PUSH2 0x01f9
	0342    56  *JUMP
	// Stack delta = +2
	// Outputs[2]
	// {
	//     @033B  stack[0] = 0x0343
	//     @033E  stack[1] = stack[-1]
	// }
	// Block ends with call to 0x01f9, returns to 0x0343

label_0343:
	// Incoming return from call to 0x01F9 at 0x0342
	// Inputs[3]
	// {
	//     @0344  stack[-3]
	//     @0345  stack[-1]
	//     @0348  stack[-4]
	// }
	0343    5B  JUMPDEST
	0344    82  DUP3
	0345    52  MSTORE
	0346    50  POP
	0347    50  POP
	0348    56  *JUMP
	// Stack delta = -4
	// Outputs[1] { @0345  memory[stack[-3]:stack[-3] + 0x20] = stack[-1] }
	// Block ends with unconditional jump to stack[-4]

label_0349:
	// Incoming call from 0x014C, returns to 0x014D
	// Inputs[2]
	// {
	//     @034E  stack[-1]
	//     @0359  stack[-8]
	// }
	0349    5B  JUMPDEST
	034A    60  PUSH1 0x00
	034C    60  PUSH1 0xe0
	034E    82  DUP3
	034F    01  ADD
	0350    90  SWAP1
	0351    50  POP
	0352    61  PUSH2 0x035e
	0355    60  PUSH1 0x00
	0357    83  DUP4
	0358    01  ADD
	0359    8A  DUP11
	035A    61  PUSH2 0x02c8
	035D    56  *JUMP
	// Stack delta = +4
	// Outputs[4]
	// {
	//     @0350  stack[0] = stack[-1] + 0xe0
	//     @0352  stack[1] = 0x035e
	//     @0358  stack[2] = stack[-1] + 0x00
	//     @0359  stack[3] = stack[-8]
	// }
	// Block ends with call to 0x02c8, returns to 0x035E

label_035E:
	// Incoming return from call to 0x02C8 at 0x035D
	// Inputs[2]
	// {
	//     @0364  stack[-2]
	//     @0366  stack[-8]
	// }
	035E    5B  JUMPDEST
	035F    61  PUSH2 0x036b
	0362    60  PUSH1 0x20
	0364    83  DUP4
	0365    01  ADD
	0366    89  DUP10
	0367    61  PUSH2 0x02c8
	036A    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @035F  stack[0] = 0x036b
	//     @0365  stack[1] = stack[-2] + 0x20
	//     @0366  stack[2] = stack[-8]
	// }
	// Block ends with call to 0x02c8, returns to 0x036B

label_036B:
	// Incoming return from call to 0x02C8 at 0x036A
	// Inputs[2]
	// {
	//     @0371  stack[-2]
	//     @0373  stack[-7]
	// }
	036B    5B  JUMPDEST
	036C    61  PUSH2 0x0378
	036F    60  PUSH1 0x40
	0371    83  DUP4
	0372    01  ADD
	0373    88  DUP9
	0374    61  PUSH2 0x030d
	0377    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @036C  stack[0] = 0x0378
	//     @0372  stack[1] = stack[-2] + 0x40
	//     @0373  stack[2] = stack[-7]
	// }
	// Block ends with call to 0x030d, returns to 0x0378

label_0378:
	// Incoming return from call to 0x030D at 0x0377
	// Inputs[2]
	// {
	//     @037E  stack[-2]
	//     @0380  stack[-6]
	// }
	0378    5B  JUMPDEST
	0379    61  PUSH2 0x0385
	037C    60  PUSH1 0x60
	037E    83  DUP4
	037F    01  ADD
	0380    87  DUP8
	0381    61  PUSH2 0x031c
	0384    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @0379  stack[0] = 0x0385
	//     @037F  stack[1] = stack[-2] + 0x60
	//     @0380  stack[2] = stack[-6]
	// }
	// Block ends with call to 0x031c, returns to 0x0385

label_0385:
	// Incoming return from call to 0x031C at 0x0384
	// Inputs[2]
	// {
	//     @038B  stack[-2]
	//     @038D  stack[-5]
	// }
	0385    5B  JUMPDEST
	0386    61  PUSH2 0x0392
	0389    60  PUSH1 0x80
	038B    83  DUP4
	038C    01  ADD
	038D    86  DUP7
	038E    61  PUSH2 0x032b
	0391    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @0386  stack[0] = 0x0392
	//     @038C  stack[1] = stack[-2] + 0x80
	//     @038D  stack[2] = stack[-5]
	// }
	// Block ends with call to 0x032b, returns to 0x0392

label_0392:
	// Incoming return from call to 0x032B at 0x0391
	// Inputs[2]
	// {
	//     @0398  stack[-2]
	//     @039A  stack[-4]
	// }
	0392    5B  JUMPDEST
	0393    61  PUSH2 0x039f
	0396    60  PUSH1 0xa0
	0398    83  DUP4
	0399    01  ADD
	039A    85  DUP6
	039B    61  PUSH2 0x033a
	039E    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @0393  stack[0] = 0x039f
	//     @0399  stack[1] = stack[-2] + 0xa0
	//     @039A  stack[2] = stack[-4]
	// }
	// Block ends with call to 0x033a, returns to 0x039F

label_039F:
	// Incoming return from call to 0x033A at 0x039E
	// Inputs[2]
	// {
	//     @03A5  stack[-2]
	//     @03A7  stack[-3]
	// }
	039F    5B  JUMPDEST
	03A0    61  PUSH2 0x03ac
	03A3    60  PUSH1 0xc0
	03A5    83  DUP4
	03A6    01  ADD
	03A7    84  DUP5
	03A8    61  PUSH2 0x033a
	03AB    56  *JUMP
	// Stack delta = +3
	// Outputs[3]
	// {
	//     @03A0  stack[0] = 0x03ac
	//     @03A6  stack[1] = stack[-2] + 0xc0
	//     @03A7  stack[2] = stack[-3]
	// }
	// Block ends with call to 0x033a, returns to 0x03AC

label_03AC:
	// Incoming return from call to 0x033A at 0x03AB
	// Inputs[3]
	// {
	//     @03AD  stack[-10]
	//     @03AD  stack[-1]
	//     @03AE  stack[-9]
	// }
	03AC    5B  JUMPDEST
	03AD    98  SWAP9
	03AE    97  SWAP8
	03AF    50  POP
	03B0    50  POP
	03B1    50  POP
	03B2    50  POP
	03B3    50  POP
	03B4    50  POP
	03B5    50  POP
	03B6    50  POP
	03B7    56  *JUMP
	// Stack delta = -9
	// Outputs[1] { @03AD  stack[-10] = stack[-1] }
	// Block ends with unconditional jump to stack[-10]

	03B8    FE    *ASSERT
	03B9    A2    LOG2
	03BA    64    PUSH5 0x6970667358
	03C0    22    22
	03C1    12    SLT
	03C2    20    SHA3
	03C3    26    26
	03C4    D3    D3
	03C5    30    ADDRESS
	03C6    C4    C4
	03C7    B4    B4
	03C8    D1    D1
	03C9    02    MUL
	03CA    86    DUP7
	03CB    C5    C5
	03CC    86    DUP7
	03CD    DB    DB
	03CE    70    PUSH17 0x47e02aba445900ffe43c508178a0d01571
	03E0    80    DUP1
	03E1    10    LT
	03E2    FE    *ASSERT
	03E3    64    PUSH5 0x736f6c6343
	03E9    00    *STOP
	03EA    08    ADDMOD
	03EB    0B    SIGNEXTEND
	03EC    00    *STOP
	03ED    33    CALLER
